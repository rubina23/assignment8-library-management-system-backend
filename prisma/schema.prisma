generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model Book {
  bookId          String         @id @default(uuid())
  title           String
  genre           String
  publishedYear   Int
  totalCopies     Int
  availableCopies Int
  BorrowRecords   BorrowRecord[]
}

model Author {
  authorId   String   @id @default(uuid())
  name       String
  bio        String
  dateOfBirth DateTime
}

model Member {
  memberId        String         @id @default(uuid())
  name            String
  email           String         @unique
  phone           String
  membershipDate  DateTime
  BorrowRecords   BorrowRecord[]
}

model BorrowRecord {
  borrowId   String    @id @default(uuid())
  borrowDate DateTime
  returnDate DateTime?
  
  bookId     String
  memberId   String
  
  Book       Book      @relation(fields: [bookId], references: [bookId])
  Member     Member    @relation(fields: [memberId], references: [memberId])

  @@index([bookId])
  @@index([memberId])
}



//-------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------
// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }


// model Book {
//   bookId String @id @default(uuid())
//   title String
//   genre String
//   publishedYear Int
//   totalCopies Int
//   availableCopies Int
//   borrowRecord BorrowRecord[]

//   @@map("books")
// }

// model Author {
//   authorId String @id @default(uuid())
//   name String
//   bio String
//   dateOfBirth DateTime

//   @@map("authors")
// }

// model Member {
//   memberId String @id @default(uuid())
//   name String
//   email String
//   phone String
//   membershipDate DateTime
//   borrowRecord BorrowRecord[]

//   @@map("members")
// }

// model BorrowRecord  {
//   borrowId String @id @default(uuid())
//   borrowDate DateTime
//   returnDate DateTime
//   book Book @relation(fields: [bookId], references: [bookId])
//   member Member @relation(fields: [memberId], references: [memberId])

//   // @@map("borrowRecords")
// }

